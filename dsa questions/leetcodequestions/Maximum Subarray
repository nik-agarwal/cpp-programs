// Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
// A subarray is a contiguous part of an array.

// Example 1:
// Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
// Output: 6
// Explanation: [4,-1,2,1] has the largest sum = 6.

// Ans - we can use Kadane's Algorithm to solve this problem 
//  it is best possible way to solve the problem in O(n) complexity (Brute Force technique solve in O(n^2) complexity)


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxsum=INT_MIN;
        int currsum=0;
        for(int i=0;i<nums.size();++i){
            currsum+=nums[i];
            if(currsum>maxsum){
                maxsum = currsum;
            }
            if(currsum<0)
                currsum =0;
        }
        return maxsum;
    }
};
